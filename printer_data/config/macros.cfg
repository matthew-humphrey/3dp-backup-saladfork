[gcode_macro SAFE_SHUTDOWN_MACHINE]
gcode:
#  {% set safe_extruder_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp|default(50)|int %}
#  {% if printer.idle_timeout.state == "Printing" %}
#    RESPOND TYPE=error MSG="Shutdown: Print in progress"
#    _DISPLAY_AND_CLEAR MSG="!! PRINTING"
#  {% elif printer.extruder.temperature > safe_extruder_temp %}
#    RESPOND TYPE=error MSG="Shutdown: Extruder temp > {safe_extruder_temp}"
#    _DISPLAY_AND_CLEAR MSG="!! EXTRUDER TEMP"
#  {% else %}
    RESPOND MSG="Shutting down"
    SET_DISPLAY_TEXT MSG="Shutting down"
    TURN_OFF_HEATERS
    M107 # Turn off FAN
    M84 # Disable steppers
    {action_call_remote_method("shutdown_machine")}
 #{% endif %}

[gcode_macro PRINT_START]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(80)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(225)|float %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
  CLEAR_PAUSE
  SAVE_GCODE_STATE NAME=STATE_PRINT_START
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # start with the print fan off
  M107
  # Pre-heat
  SET_DISPLAY_TEXT MSG="Pre-heat..."
  # Start bed heater
  RESPOND MSG="Pre-heat extruder ..."
  M104 S150
  RESPOND MSG="Heat bed ..."
  M190 S{BED_TEMP}
  RESPOND MSG="Homing ..."
  G28
  Z_TILT_ADJUST
  G28 Z
  # Mesh
  SET_DISPLAY_TEXT MSG="Calibrating bed mesh"
  BED_MESH_CALIBRATE ADAPTIVE=1
  BED_MESH_OUTPUT
  # Park near front left of bed
  G0 X50 Y10 Z30 F3600
  # Finish heating extruder
  RESPOND MSG="Heat extruder ..."
  SET_DISPLAY_TEXT MSG="Heat extruder"
  M109 S{EXTRUDER_TEMP}
  RESPOND MSG="Printing..."
  SET_DISPLAY_TEXT MSG="Printing"
  RESTORE_GCODE_STATE NAME=STATE_PRINT_START
  G92 E0
  
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 25, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro LIGHTS_ON]
# Turn all lights on full, white color
gcode:
    SET_LED LED="headlight" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1

[gcode_macro LIGHTS_OFF]
# Turn all lights off
gcode:
    SET_LED LED="headlight" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1

[gcode_macro CENTER_X]
description: Move to the X center of the bed
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set x_axis_maximum = printer.toolhead.axis_maximum.x %}
  {% set bed_dx = client.bed_dx|default(x_axis_maximum) %}
  {% set travel_speed = client.travel_speed|default(3000) %}
  G1 X{bed_dx/2} F{travel_speed}

[gcode_macro CENTER_Y]
description: Move to the Y center of the bed
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set y_axis_maximum = printer.toolhead.axis_maximum.y %}
  {% set bed_dy = client.bed_dy|default(y_axis_maximum) %}
  {% set travel_speed = client.travel_speed|default(3000) %}
  G1 Y{bed_dy/2} F{travel_speed}

[gcode_macro CENTER_XY]
description: Move to the center of the bed
gcode:
  CENTER_Y
  CENTER_X
